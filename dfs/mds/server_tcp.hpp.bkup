
#include <boost/asio.hpp>
#include <boost/bind.hpp>
#include <boost/lexical_cast.hpp>
#include <iostream>
#include <vector>
#include "connection.hpp" // Must come before boost/serialization headers.
#include <boost/serialization/vector.hpp>
#include "mds.h"

using boost::asio::ip::udp;

class server
{
public:
	server(boost::asio::io_service& io_service, unsigned short port)
	    : acceptor_(io_service, boost::asio::ip::tcp::endpoint(boost::asio::ip::tcp::v4(), port))
	{
	    // Start an accept operation for a new connection.
	    connection_ptr new_conn(new connection(acceptor_.get_io_service()));
	    acceptor_.async_accept(new_conn->socket(),
	        boost::bind(&server::handle_accept, this,
	          boost::asio::placeholders::error, new_conn));
	}

	/// Handle completion of a accept operation.
	void handle_accept(const boost::system::error_code& e, connection_ptr conn)
	{
		if (!e)
		{
		  // Successfully accepted a new connection. Send the list of stocks to the
		  // client. The connection::async_write() function will automatically
		  // serialize the data structure for us.
		  conn->async_write(stocks_,
			  boost::bind(&server::handle_write, this,
				boost::asio::placeholders::error, conn));
		}

		// Start an accept operation for a new connection.
		connection_ptr new_conn(new connection(acceptor_.get_io_service()));
		acceptor_.async_accept(new_conn->socket(),
			boost::bind(&server::handle_accept, this,
			  boost::asio::placeholders::error, new_conn));
	}

	/// Handle completion of a write operation.
	void handle_write(const boost::system::error_code& e, connection_ptr conn)
	{
		// Nothing to do. The socket will be closed automatically when the last
		// reference to the connection object goes away.
	}



private:
	/// The acceptor object used to accept incoming socket connections.
	boost::asio::ip::tcp::acceptor acceptor_;

	/// The data to be sent to each client.
	std::vector<stock> stocks_;
};

